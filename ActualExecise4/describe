此包分4层
TestCases, 测试用例
PageObjects, 页面对象
TestDatas 测试数据
PageLocators 元素定位
调用顺序：TestCases = PageObjects+TestDatas
                        |
                    PageLocators
分离测试数据：
    1.部分数据公用
    2.方便维护
    3.环境切换：集成测试环境SIT->预发布环境->生产环境
管理web测试数据？
    1.python文件里面 引入使用
    2.excel -
    3.yaml -
    4.配置文件 -
自动化测试用例原则：（前置- 步骤- 后置 - 测试顺序）
    1.用例尽量保持独立性，其他用例成功与否与我无关，不会影响我的执行
        每一个用例都打开和关闭浏览器，环境准备和清理工作
        有必然业务联系：流程有5个角色 申请人-审批1-审批2-审批2-审批3-审批4
    2.用例尽量简单（太复杂的用例不做自动化） 复杂用例 拆成多个子用例实现
    3.正常场景  主流程覆盖
    4.异常场景 繁琐、规律  字段检验
    4.稳定性优先
        脚本质量 等待  元素定位  
        测试环境 网络、硬件性能、数据
    5.尽量不依赖当前的测试环境数据 前提条件可以自己创造，减少人为的参与
========================================================================
1.了解业务熟悉业务
2.写测试用例  前置、步骤、期望---涉及哪些页面/哪些功能
3.转化成自动化用例
4.测试账号来说：自动化专用
========================================================================
针对PageObjects层进行优化
1.等待，操作  重复/简化
2.日志--记录用例执行的过程
3.实时捕获异常信息--输入日志当中
4.失败截图
对selenium的基本api进行二次封装，加上日志、截图、异常处理
自动化测试框架-应该具备什么？ -- 稳定通用
1.入口 - 启动文件 - main.py
2.日志/异常信息捕获和输出 报告/用例管理/筛选用例 (unittest,pytest)/可扩展
